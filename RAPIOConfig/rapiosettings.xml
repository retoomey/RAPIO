<!-- RAPIO global settings file 
   Toomey December 2020

  The whole global vs command line debate...things will evolve hopefully
-->

<settings>

<!-- Settings for logging output, colors, etc. Note: These settings
     are read once on algorithm startup. Note logging verbosity is
     always set on command line
     use:   The logging engine.  Most likely I'm going to want to log to AWS
            or something at some point directly, so we have a choice of how to
            log.  Currently there are two:
            "cout"  Use std::cout direct printing. (works with more better)
            "boost" Use boost logging.
     flush: milliseconds between hard flushes of log.  The smaller this
            number the slower things will be
     color: Set to 'true' to show colors in logging.  Colors can be
            nice but many capture utilities, etc. can freak out so
            this allows turning off globally.
     helpcolor: Set to 'true' to show colors in alg help.
     pattern: Logging pattern with following tokens:
             %TIME% Current UTC time
             %TIMEMS% Current UTC time with milliseconds
             %TIMEC% Current clock with milliseconds
             %LEVEL% The logging level of the message such as 'severe'
             %MESSAGE% The raw logging message
             %THREADID% The thread id responsible for printing
        Debugging support:
             %FILE% The file name in code
             %LINE% The line of the file name
             %FUNCTION% Full function name and parameters currently in
        Color support: (I'll probably come back later replace with general RGB)
             %ECOLOR% Mark info green, debug cyan, error red
             %RED% ansi red, iff color true
             %GREEN% ansi red, iff color true
             %BLUE% ansi red, iff color true
             %YELLOW% ansi red, iff color true
             %OFF% turn off current color

        For MRMS w2algrun stuff, I recommand this pattern:
            This is because the logger adds its own timestamp, etc.
            The timec will still add just the clock so you'll know
            difference between log time and output time.
            pattern="%TIMEC%%LEVEL%:%FILE%:%LINE%: %MESSAGE%"
        General developers:
            pattern="%GREEN%[%TIMEMS%]%ECOLOR% %LEVEL%:%YELLOW%%FILE%:%GREEN%%LINE%:%OFF% %MESSAGE%"
        General operations:
            pattern="%GREEN%[%TIMEMS%]%ECOLOR% %LEVEL%:%OFF% %MESSAGE%"
-->
<logging use="cout"
         flush="900" 
         color="true" 
         helpcolor="true" 
         pattern="%TIMEC%%ECOLOR% %LEVEL%:%OFF% %MESSAGE%"
>
</logging>

<!-- Settings for the individual datatype reader/writers. 
     Currently these are global for every algorithm
Information needed:
1.  names  == the introduced builder name.  Used in FML records, etc. It's the
    lookup for a record to a reader. Spaces separate alias
2.  Each io can have multiple outputs with different settings, allowing a 
    writer to be called multiple times.  For example writing png and jpeg at 
    same time.
 -->
<datatype subdirs="true">

<!-- Lookup table from file endings to io type.  Typically used with the
   file index or file output for direct read/write.  This information is
   normally in the metadata of the index.  Don't worry about compression
   endings like .gz, those are auto recognized by RAPIO -->
  <suffixes>
    <file suffix="nc" io="netcdf"/>
    <file suffix="netcdf" io="netcdf"/>
    <file suffix="png" io="image"/>
    <file suffix="jpg" io="image"/>
    <file suffix="xml" io="xml"/>
    <file suffix="json" io="json"/>
    <file suffix="raw" io="raw"/>
    <file suffix="shp" io="gdal"/>
    <file suffix="txt" io="text"/>
    <file suffix="grib2" io="grib"/>
    <file suffix="gb2" io="grib"/>
  </suffixes>

<!-- Settings for the built in XML reader --> 
  <io names="xml W2ALGS">
    <output />
  </io>

<!-- Netcdf module settings
     ncflags: Combined cmode flags for nc_create function. 
              Example: 4096 == 0x1000 == NC_NETCDF4
                       256  == 0x0100 == NC_CLASSIC_MODEL   (This is fast)
              We 'could' use strings but that would limit ability here.
              Note: Mess up this value and it will complain on writing.
     nc_def_var_deflate parameters
     deflate_level: 0 no compression to 9 max compression
-->
  <io names="netcdf netcdf3" module="librapionetcdf.so">
    <output ncflags="256" deflate_level="0"/>
  </io>

<!-- Python module settings
     bin: Path of python executable.  RAPIO will try to find your python
          from your path, but you can force it here if it's unable or grabbing
          the wrong python.
          Example: <output bin="/usr/bin/python"/>
     print: 'true' Log the print output of the python script
-->
  <io names="python" module="librapiopython.so">
    <output print="true"/>
  </io>

<!-- Imagick module settings
     cols: width of image
     rows: height of image
     suffix: Imagick magic file ending such as png, tif, jpg
             The suffix is how Imagick chooses its file output format 
     FIXME: Add more settings and tile settings and ability
     mode:   "degrees" Degree out from center degrees
                 degrees: The degrees out from center point of data
             "full" Use full extent, row cols of data (For example, full LatLonGrid )
-->
  <io names="image" module="librapioimage.so">
    <!--output mode="degree" suffix="png" cols="500" rows="500" degrees="1"-->
    <output mode="full" suffix="png" />
  </io>

<!-- GDAL module
     cols: width of image
     rows: height of image
     suffix: added to the file ending.
     driver: Known GDAL driver string say from https://gdal.org/drivers/raster/index.html 
     FIXME: Add more settings and tile settings and ability
     degrees: Degrees out from datatype center to create a Lat Lon coverage
-->
  <io names="gdal" module="librapiogdal.so">
    <output driver="GTiff" suffix="tif" cols="1000" rows="1000" degrees="10" />
  </io>

<!-- GRIB module
     bmode: Buffer mode.  How to read file and buffer.
              Example: 0: Read file by message (field buffer)
                          Seek/read by grib2 message.
                          RAM is only required for the current grib2 message.
                          This is the default so we're RAM friendly with MRMS
                          and other algorithms.
                       1: Read file entirely into RAM then process
                          This mode 'may' be quicker but you need RAM
                          for the entire file and some grib2 files are
                          fairly large say 1 GB or more.
-->
  <io names="grib" module="librapiogrib.so">
    <output bmode="0"/>
  </io>

<!-- RAW module settings
     This reads a binary table from MRMS merger stage 1 output
-->
  <io names="raw w2merger" module="librapioraw.so">
    <output />
  </io>

<!-- HMRG module settings
     This reads/writes HMET MRMS binary
-->
  <io names="hmrg" module="librapiohmrg.so">
    <output />
  </io>

<!-- Text module settings
     This writer is for converting DataType to text.  Note, for
     special types like xml, json, etc. you probably want the
     unique module for that which will generate more standard output
-->
  <io names="text" module="librapiotext.so">
    <output />
  </io>

</datatype>

</settings>
